[General]
SyntaxVersion=2
BeginHotkey=121
BeginHotkeyMod=0
PauseHotkey=0
PauseHotkeyMod=0
StopHotkey=123
StopHotkeyMod=0
RunOnce=1
EnableWindow=
MacroID=35057b18-9947-4443-878d-e155d71b1e6f
Description=ENE下轨
Enable=1
AutoRun=0
[Repeat]
Type=0
Number=1
[SetupUI]
Type=2
QUI=
[Relative]
SetupOCXFile=
[Comment]

[Script]
LogStart "d:\gupiao\log\ENE下轨测试.log"


测试找到高低点
//测试生成持仓股票文件 
//testFenShiAddtionalPic 
//testDuoTouPaiLie
//testStartStopThs
//testLoopProcessTHSstockFile
//testVbsJson

MessageBox "End"
LogStop 
EndScript

Function 测试找到高低点
	hwnd = Lib.同花顺.getThsHwnd()
	If hwnd > 0 Then 
		Call Lib.公用函数.InputKeyboardCode("600365")
		Call Lib.公用函数.MouseClick(150, 234)
		ciDiDian = 0
		ciGaoDian = 0
		For dayNum = 1 To 200
			KeyPress "Right", 1
			Delay 1000
			pageDataStr = Lib.框架函数1.getTradeData("600365")
			pageStr = Split(pageDataStr, "|")
			Dim pageData(50)
			If UBound(pageStr) >= 0 Then 
				For i = 0 To UBound(pageStr)
					If pageStr(i) = "-1" Then 
						pageData(i) = - 1 
						msgStr = "数据采集错误：" & i & "数据=" & pageDataStr
						showErrorMsg(msgError)
					Else 
						If i = 9 or i = 10 Then 
							pageData(i) = pageStr(i)
							//MessageBox "i=" & i & ",pageStr=" & pageStr(i)
						Else 
							pageData(i) = Cdbl(pageStr(i))
						End If
					End if
				Next
			End If
			
			newPrice = pageData(0)
			openPrice = pageData(1)
			highPrice = pageData(2)
			lowerPrice = pageData(3)
			cjl = pageData(4)
			curDate = pageData(9)
			curTime=pageData(10)
			If highPrice > 0 and lowerPrice > 0 Then 
			
				//MessageBox ciGaoDian_high & "," & ciDiDian_lower & "," & highPrice & "," & lowerPrice&","& curDate & "," & curTime
				If ciDiDian_lower = 0 Then 
					ciDiDian_lower = lowerPrice
					ciDiDian_high = highPrice
					ciDiDian_date = curDate
					ciDiDian_time = curTime
				End If
				If ciGaoDian_high = 0 Then 
					ciGaoDian_high = highPrice
					ciGaoDian_lower = lowerPrice
					ciGaoDian_date = curDate
					ciGaoDian_time = curTime
				End If
				If lowerPrice < ciDiDian_lower Then 
					MessageBox "次低点：" & ciDiDian_date & " " & ciDiDian_time & ",lowerPrice=" & lowerPrice & ",ciDiDian="& ciDiDian_lower & "num=" & dayNum
					ciDiDian_high = highPrice
					ciDiDian_lower = lowerPrice
					ciDiDian_date = curDate
					ciDiDian_time = curTime
					ciDiDianNum = dayNum
					
					If dayNum - ciDiDianNum > 3 Then 
						TracePrint "次低点：" & ciDiDian_date & " " & ciDiDian_time & ",lowerPrice=" & ciDiDian_lower
					End If
				End If
			
				//MessageBox "次低点：" & ciDiDian & ",lowerPrice=" & lowerPrice
				If highPrice > ciGaoDian_high Then 
					MessageBox "次高点:" & ciGaoDian_date & " " & ciGaoDian_time & ",highPrice=" & highPrice & ",ciGaoDian="  & ciGaoDian_high & "num=" & dayNum

					ciGaoDian_lower = lowerPrice
					ciGaoDian_high = highPrice
					ciGaoDian_date = curDate
					ciGaoDian_time = curTime
					ciGaoDianNum = dayNum
					
					If dayNum - ciGaoDianNum > 3 Then 
						TracePrint "次高点:" & ciGaoDian_date & " " & ciGaoDian_time & ",highPrice=" & ciGaoDian_high
					End If
				End If			
			End If
			
		Next

	End If
End Function

//测试代码

Function 测试生成持仓股票文件
	hwnd = Lib.长城证券智达信.getTdxHwnd()
	If hwnd < 0 Then 	
		MessageBox "转换通达信返回值=" & 返回值
		Exit Function
	End If
	返回值 = Lib.长城证券智达信.genChiCangTxt()
End Function

Function testCJL
	hwnd = getThsHwnd()
	If hwnd > 0 Then 
		Call Lib.公用函数.删除文件("d:\gupiao\data\量升.json")
		Call loopProcessTHSStockFile("d:\gupiao\data\ENE下轨.json", "量升", "5分钟")
		If Plugin.File.IsFileExist("d:\gupiao\data\量升.json") Then 
			MessageBox "找到均线多头排列的股票"
		End If	
	End If
End Function

Function testFenShiAddtionalPic
	hwnd = getThsHwnd()
	If hwnd > 0 Then 
		Call setAddtionalPicStyle()
	End If	
End Function

//测试5分钟多头排列
Function testDuoTouPaiLie
	hwnd = getThsHwnd()
	If hwnd > 0 Then 
		Call Lib.公用函数.删除文件("d:\gupiao\data\均线多头排列.json")
		Call loopProcessTHSStockFile("d:\gupiao\data\ENE下轨.json", "低吸", "5分钟")
		If Plugin.File.IsFileExist("d:\gupiao\data\均线多头排列.json") Then 
			MessageBox "找到均线多头排列的股票"
		End If	
	End If
End Function

Function testVbsJson
 	//Dim s As String
 
 	tmpStr = "{" & """" & "a" & """" & ":" & """" & 25 & """" & "," & """" & "b" & """" & ":" &  """" & 86 & """" & "}"
 	MessageBox "tmpStr=" & tmpStr

	call Class_Initialize()
	set vj = decode (tmpStr)

	MessageBox vj.ma5
	
End Function

Function testLoopProcessTHSstockFile
	返回值 = Lib.同花顺.getThsHwnd()
	Delay 1000
	//MessageBox "返回值=" & 返回值
	If Plugin.File.IsFileExist("d:\gupiao\data\ENE下轨.json") Then 
		loopStr = Plugin.File.ReadINI("ths", "LopNum", "d:\gupiao\data\Config.ini")
		If loopStr <> "" Then 
			loopNum = CDbl(loopStr)
			If loopNum = 0 Then 
				Call Lib.公用函数.删除文件("d:\gupiao\data\ENE下轨.json")
			End If
		End If
	End If
	call loopProcessTHSStockFile("d:\gupiao\data\basic\正常股票.txt", "ENE下轨", "day")
End Function

Function testGetKLineData	
	setMainPicStyle ("KLineStyle")
	call Lib.同花顺.setPeriod("5分钟")
	Call getKLineData()
End Function




//框架函数.lib




//公共函数
Sub showErrorMsg(msgStr)
	Plugin.Msg.Tips msgStr
    TracePrint msgStr	
End Sub




//VBSBegin
//Class VbsJson

    'Author: Demon
    'Date: 2012/5/3
    'Website: http://demon.tw
    Private Whitespace, NumberRegex, StringChunk
    Private b, f, r, n, t

    Private Sub Class_Initialize
        Whitespace = " " & vbTab & vbCr & vbLf
        b = ChrW(8)
        f = vbFormFeed
        r = vbCr
        n = vbLf
        t = vbTab

        Set NumberRegex = New RegExp
        NumberRegex.Pattern = "(-?(?:0|[1-9]\d*))(\.\d+)?([eE][-+]?\d+)?"
        //NumberRegex.Global = False
        NumberRegex.MultiLine = True
        NumberRegex.IgnoreCase = True

        Set StringChunk = New RegExp
        StringChunk.Pattern = "([\s\S]*?)([""\\\x00-\x1f])"
        //StringChunk.Global = False
        StringChunk.MultiLine = True
        StringChunk.IgnoreCase = True
    End Sub
    
    'Return a JSON string representation of a VBScript data structure
    'Supports the following objects and types
    '+-------------------+---------------+
    '| VBScript          | JSON          |
    '+===================+===============+
    '| Dictionary        | object        |
    '+-------------------+---------------+
    '| Array             | array         |
    '+-------------------+---------------+
    '| String            | string        |
    '+-------------------+---------------+
    '| Number            | number        |
    '+-------------------+---------------+
    '| True              | true          |
    '+-------------------+---------------+
    '| False             | false         |
    '+-------------------+---------------+
    '| Null              | null          |
    '+-------------------+---------------+
    Public Function Encode(ByRef obj)
        Dim buf, i, c, g
        Set buf = CreateObject("Scripting.Dictionary")
        Select Case VarType(obj)
            Case vbNull
                buf.Add buf.Count, "null"
            Case vbBoolean
                If obj Then
                    buf.Add buf.Count, "true"
                Else
                    buf.Add buf.Count, "false"
                End If
            Case vbInteger, vbLong, vbSingle, vbDouble
                buf.Add buf.Count, obj
            Case vbString
                buf.Add buf.Count, """"
                For i = 1 To Len(obj)
                    c = Mid(obj, i, 1)
                    /*
                    Select Case c
                        //Case "\"\"" buf.Add buf.Count, "\"""
                        //Case "\\"  buf.Add buf.Count, "\\"
                        //Case "/"  buf.Add buf.Count, "/"
                        Case b    buf.Add buf.Count, "\b"
                        Case f    buf.Add buf.Count, "\f"
                        Case r    buf.Add buf.Count, "\r"
                        Case n    buf.Add buf.Count, "\n"
                        Case t    buf.Add buf.Count, "\t"
                        Case Else
                            If AscW(c) >= 0 And AscW(c) <= 31 Then
                                c = Right("0" & Hex(AscW(c)), 2)
                                buf.Add buf.Count, "\u00" & c
                            Else
                                buf.Add buf.Count, c
                            End If
                    End Select
                    */
                Next
                buf.Add buf.Count, """"
            Case vbArray + vbVariant
                g = True
                buf.Add buf.Count, "["
                For Each i In obj
                    If g Then g = False Else buf.Add buf.Count, ","
                    buf.Add buf.Count, Encode(i)
                Next
                buf.Add buf.Count, "]"
            Case vbObject
            	/*
                If TypeName(obj) = "Dictionary" Then
                    g = True
                    buf.Add buf.Count, "{"
                    For Each i In obj
                        If g Then g = False Else buf.Add buf.Count, ","
                        //buf.Add buf.Count, """" & i & """" & ":" & Encode(obj(i))
                    Next
                    buf.Add buf.Count, "}"
                Else
                    //Err.Raise 8732,,"None dictionary object"
                    TracePrint "None dictionary object"
                End If
                */
            Case Else
                buf.Add buf.Count, """" & CStr(obj) & """"
        End Select
        Encode = Join(buf.Items, "")
    End Function

    'Return the VBScript representation of ``str(``
    'Performs the following translations in decoding
    '+---------------+-------------------+
    '| JSON          | VBScript          |
    '+===============+===================+
    '| object        | Dictionary        |
    '+---------------+-------------------+
    '| array         | Array             |
    '+---------------+-------------------+
    '| string        | String            |
    '+---------------+-------------------+
    '| number        | Double            |
    '+---------------+-------------------+
    '| true          | True              |
    '+---------------+-------------------+
    '| false         | False             |
    '+---------------+-------------------+
    '| null          | Null              |
    '+---------------+-------------------+
    Public Function Decode(ByRef str)
        Dim idx
        idx = SkipWhitespace(str, 1)

        If Mid(str, idx, 1) = "{" Then
            Set Decode = ScanOnce(str, 1)
        Else
            Decode = ScanOnce(str, 1)
        End If
    End Function
    
    Private Function ScanOnce(ByRef str, ByRef idx)
        Dim c, ms

        idx = SkipWhitespace(str, idx)
        c = Mid(str, idx, 1)

        If c = "{" Then
            idx = idx + 1
            Set ScanOnce = ParseObject(str, idx)
            Exit Function
        ElseIf c = "[" Then
            idx = idx + 1
            ScanOnce = ParseArray(str, idx)
            Exit Function
        ElseIf c = """" Then
            idx = idx + 1
            ScanOnce = ParseString(str, idx)
            Exit Function
        ElseIf c = "n" And StrComp("null", Mid(str, idx, 4)) = 0 Then
            idx = idx + 4
            ScanOnce = Null
            Exit Function
        ElseIf c = "t" And StrComp("true", Mid(str, idx, 4)) = 0 Then
            idx = idx + 4
            ScanOnce = True
            Exit Function
        ElseIf c = "f" And StrComp("false", Mid(str, idx, 5)) = 0 Then
            idx = idx + 5
            ScanOnce = False
            Exit Function
        End If
        
        Set ms = NumberRegex.Execute(Mid(str, idx))
        If ms.Count = 1 Then
            idx = idx + ms(0).Length
            ScanOnce = CDbl(ms(0))
            Exit Function
        End If
        
        //Err.Raise 8732,,"No JSON object could be ScanOnced"
        TracePrint "No JSON object could beScanOnced"
    End Function

    Private Function ParseObject(ByRef str, ByRef idx)
        Dim c, key, value
        Set ParseObject = CreateObject("Scripting.Dictionary")
        idx = SkipWhitespace(str, idx)
        c = Mid(str, idx, 1)
        
        If c = "}" Then
            Exit Function
        ElseIf c <> """" Then
            //Err.Raise 8732,,"Expecting property name"
            TracePrint "Expecting property name"
        End If

        idx = idx + 1
        
        Do
            key = ParseString(str, idx)

            idx = SkipWhitespace(str, idx)
            If Mid(str, idx, 1) <> ":" Then
                //Err.Raise 8732,,"Expecting : delimiter"
                TracePrint "Expecting : delimiter"
            End If

            idx = SkipWhitespace(str, idx + 1)
            If Mid(str, idx, 1) = "{" Then
                Set value = ScanOnce(str, idx)
            Else
                value = ScanOnce(str, idx)
            End If
            ParseObject.Add key, value

            idx = SkipWhitespace(str, idx)
            c = Mid(str, idx, 1)
            If c = "}" Then
                Exit Do
            ElseIf c <> "," Then
                //Err.Raise 8732,,"Expecting , delimiter"
                TracePrint "Expecting , delimiter"
            End If

            idx = SkipWhitespace(str, idx + 1)
            c = Mid(str, idx, 1)
            If c <> """" Then
                //Err.Raise 8732,,"Expecting property name"
                TracePrint "Expecting property name"
            End If

            idx = idx + 1
        Loop

        idx = idx + 1
    End Function
    
    Private Function ParseArray(ByRef str, ByRef idx)
        Dim c, values, value
        Set values = CreateObject("Scripting.Dictionary")
        idx = SkipWhitespace(str, idx)
        c = Mid(str, idx, 1)

        If c = "]" Then
            ParseArray = values.Items
            Exit Function
        End If

        Do
            idx = SkipWhitespace(str, idx)
            If Mid(str, idx, 1) = "{" Then
                Set value = ScanOnce(str, idx)
            Else
                value = ScanOnce(str, idx)
            End If
            values.Add values.Count, value

            idx = SkipWhitespace(str, idx)
            c = Mid(str, idx, 1)
            If c = "]" Then
                Exit Do
            ElseIf c <> "," Then
                //Err.Raise 8732,,"Expecting , delimiter"
                TracePrint "Expecting , delimiter"
            End If

            idx = idx + 1
        Loop

        idx = idx + 1
        ParseArray = values.Items
    End Function
    
    Private Function ParseString(ByRef str, ByRef idx)
        Dim chunks, content, terminator, ms, esc, char
        Set chunks = CreateObject("Scripting.Dictionary")

        Do
            Set ms = StringChunk.Execute(Mid(str, idx))
            If ms.Count = 0 Then
                //Err.Raise 8732,,"Unterminated string starting"
                TracePrint "Unterminated string starting"
            End If
            
            content = ms(0).Submatches(0)
            terminator = ms(0).Submatches(1)
            If Len(content) > 0 Then
                chunks.Add chunks.Count, content
            End If
            
            idx = idx + ms(0).Length
            
            If terminator = """" Then
                Exit Do
            ElseIf terminator <> "\" Then
                //Err.Raise 8732,,"Invalid control character"
                TracePrint "Invalid control character"
            End If
            
            esc = Mid(str, idx, 1)

            If esc <> "u" Then 
            	/*
                Select Case esc
                    Case """" char = """"
                    Case "\"  char = "\"
                    Case "/"  char = "/"
                    Case "b"  char = b
                    Case "f"  char = f
                    Case "n"  char = n
                    Case "r"  char = r
                    Case "t"  char = t
                    Case Else
                    	//Err.Raise 8732,,"Invalid escape"
                    	TracePrint "Invalid escape"
                End Select
                */
                idx = idx + 1
            Else
                char = ChrW("&H" & Mid(str, idx + 1, 4))
                idx = idx + 5
            End If

            chunks.Add chunks.Count, char
        Loop

        ParseString = Join(chunks.Items, "")
    End Function

    Private Function SkipWhitespace(ByRef str, ByVal idx)
        Do While idx <= Len(str) And _
            InStr(Whitespace, Mid(str, idx, 1)) > 0
            idx = idx + 1
        Loop
        SkipWhitespace = idx
    End Function
//End class

//VBSEnd





